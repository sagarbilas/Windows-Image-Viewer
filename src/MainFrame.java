
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author arefin khan
 */
public class MainFrame extends javax.swing.JFrame {

    private static final int FRAME_WIDTH = 1000;
    private static final int FRAME_HEIGHT = 700;
    private JFileChooser chooser;
    private static String name;
    private ArrayList<String> imageFiles = new ArrayList<String>();

    public MainFrame() {
        initComponents();
        this.setTitle("Image Viewer");
        this.setSize(FRAME_WIDTH, FRAME_HEIGHT);

        //Container contentPane = getContentPane();
        //contentPane.add(imageLabel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        imageLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        zoomIn = new javax.swing.JButton();
        zoomOut = new javax.swing.JButton();
        left90Button = new javax.swing.JButton();
        right90Button = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        exitOption = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        imageLabel.setMaximumSize(new java.awt.Dimension(700, 550));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        zoomIn.setText("+");
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomInClicked(evt);
            }
        });

        zoomOut.setText("-");
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomOutClicked(evt);
            }
        });

        left90Button.setText("<--");
        left90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate90Left(evt);
            }
        });

        right90Button.setText("-->");
        right90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate90Right(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetClicked(evt);
            }
        });

        backButton.setText("<-");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonClicked(evt);
            }
        });

        forwardButton.setText("->");
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForwardButtonClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(zoomOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoomIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(left90Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(right90Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(forwardButton)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(zoomOut)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zoomIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(left90Button)
                        .addComponent(right90Button)
                        .addComponent(resetButton)
                        .addComponent(backButton)
                        .addComponent(forwardButton)))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openClicked(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        exitOption.setText("Exit");
        exitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitOptionActionPerformed(evt);
            }
        });
        jMenu1.add(exitOption);

        jMenuBar1.add(jMenu1);

        helpMenu.setText("Help");

        jMenuItem4.setText("Current Size");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetCurrentSize(evt);
            }
        });
        helpMenu.add(jMenuItem4);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitOptionActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitOptionActionPerformed

    private void openClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openClicked
        // TODO add your handling code here:
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        int r = chooser.showOpenDialog(null);
        String directory = "";

        // if file selected, set it as icon of the label
        if (r == JFileChooser.APPROVE_OPTION) {
            name = chooser.getSelectedFile().getPath();
            if (name.endsWith(".jpg") || name.endsWith(".JPG") || name.endsWith(".png") || name.endsWith(".PNG") || name.endsWith(".gif")) {
                System.out.println(name);
                imageLabel.setIcon(new ImageIcon(name));
                int slashIndex = name.lastIndexOf("\\");
                directory = name.substring(0, slashIndex + 1);
                System.out.println(directory);
            } else {
                JOptionPane.showMessageDialog(null, "Please select image type files", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        grabImagesFromCurrentLocation(directory);
    }//GEN-LAST:event_openClicked

    private void grabImagesFromCurrentLocation(String directory) {
        String path = directory;
        String files;
        File folder = new File(path);
        //System.out.println("Folder: " + folder);
        File[] listOfFiles = folder.listFiles();
        for (int i = 0; i < listOfFiles.length; i++) {
            //System.out.println("list of files: " + listOfFiles[i]);
            if (listOfFiles[i].isFile()) {
                files = listOfFiles[i].getName();
                if (files.endsWith(".jpg") || files.endsWith(".JPG") || files.endsWith(".png") || files.endsWith(".PNG") || files.endsWith(".gif")) {
                    imageFiles.add(path + files);
                    System.out.println(files);
                }
            }
        }
    }

    private void GetCurrentSize(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetCurrentSize
        // TODO add your handling code here:
        System.out.println("" + imageLabel.getHeight());
        System.out.println("" + imageLabel.getWidth());
    }//GEN-LAST:event_GetCurrentSize

    private void ZoomInClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomInClicked
        // TODO add your handling code here:
        ImageIcon ic = new ImageIcon();
        ic = (ImageIcon) imageLabel.getIcon();
        int width = ic.getIconWidth();
        int height = ic.getIconHeight();

        int newWidth = (int) (width * 1.25);
        int newHeight = (int) (height * 1.25);

        Image img = ic.getImage();
        BufferedImage bi = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics g = bi.createGraphics();
        g.drawImage(img, 0, 0, newWidth, newHeight, null);
        g.dispose();
        ImageIcon newIcon = new ImageIcon(bi);
        imageLabel.setIcon(newIcon);
    }//GEN-LAST:event_ZoomInClicked

    private void ZoomOutClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomOutClicked
        // TODO add your handling code here:
        ImageIcon ic = new ImageIcon();
        ic = (ImageIcon) imageLabel.getIcon();
        int width = ic.getIconWidth();
        int height = ic.getIconHeight();

        int newWidth = (int) (width * 0.75);
        int newHeight = (int) (height * 0.75);

        Image img = ic.getImage();
        BufferedImage bi = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = bi.createGraphics();
        g.drawImage(img, 0, 0, newWidth, newHeight, null);
        g.dispose();
        ImageIcon newIcon = new ImageIcon(bi);
        imageLabel.setIcon(newIcon);
    }//GEN-LAST:event_ZoomOutClicked

    private void rotate90Right(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90Right
        // TODO add your handling code here:
        ImageIcon icon = new ImageIcon();
        icon = (ImageIcon) imageLabel.getIcon();
        BufferedImage bi = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics g = bi.createGraphics();
        // paint the Icon to the BufferedImage.
        icon.paintIcon(null, g, 0, 0);
        g.dispose();

        BufferedImage returnImage = rotate90ToRight(bi);
        ImageIcon newIcon = new ImageIcon(returnImage);
        imageLabel.setIcon(newIcon);
    }//GEN-LAST:event_rotate90Right

    private void rotate90Left(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90Left
        // TODO add your handling code here:
        ImageIcon icon = new ImageIcon();
        icon = (ImageIcon) imageLabel.getIcon();
        BufferedImage bi = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics g = bi.createGraphics();
        // paint the Icon to the BufferedImage.
        icon.paintIcon(null, g, 0, 0);
        g.dispose();

        BufferedImage returnImage = rotate90ToLeft(bi);
        ImageIcon newIcon = new ImageIcon(returnImage);
        imageLabel.setIcon(newIcon);
    }//GEN-LAST:event_rotate90Left

    private void ResetClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetClicked
        // TODO add your handling code here:
        imageLabel.setIcon(new ImageIcon(name));
    }//GEN-LAST:event_ResetClicked

    private void ForwardButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForwardButtonClicked
        // TODO add your handling code here:
        int currentIndex, total;
        String nextImage;
        for (int i = 0; i < imageFiles.size(); i++) {
            System.out.println(i + imageFiles.get(i));
        }
        System.out.println(name);
        currentIndex = imageFiles.indexOf(name);
        System.out.println(currentIndex);
        total = imageFiles.size();
        if (currentIndex == total - 1) {
            nextImage = imageFiles.get(0);
        } else {
            nextImage = imageFiles.get(currentIndex + 1);
        }

        name = nextImage;
        imageLabel.setIcon(new ImageIcon(name));
    }//GEN-LAST:event_ForwardButtonClicked

    private void BackButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonClicked
        // TODO add your handling code here:
        int currentIndex, total;
        String nextImage;
        currentIndex = imageFiles.indexOf(name);
        total = imageFiles.size();
        if (currentIndex == 0) {
            nextImage = imageFiles.get(total - 1);
        } else {
            nextImage = imageFiles.get(currentIndex - 1);
        }

        name = nextImage;
        imageLabel.setIcon(new ImageIcon(name));
    }//GEN-LAST:event_BackButtonClicked

    public BufferedImage rotate90ToLeft(BufferedImage inputImage) {
//The most of code is same as before
        int width = inputImage.getWidth();
        int height = inputImage.getHeight();
        BufferedImage returnImage = new BufferedImage(height, width, inputImage.getType());
//We have to change the width and height because when you rotate the image by 90 degree, the
//width is height and height is width <img src='http://forum.codecall.net/public/style_emoticons/<#EMO_DIR#>/smile.png' class='bbc_emoticon' alt=':)' />

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                returnImage.setRGB(y, width - x - 1, inputImage.getRGB(x, y));
            }
        }
        return returnImage;

    }

    public BufferedImage rotate90ToRight(BufferedImage inputImage) {
        int width = inputImage.getWidth();
        int height = inputImage.getHeight();
        BufferedImage returnImage = new BufferedImage(height, width, inputImage.getType());

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                returnImage.setRGB(height - y - 1, x, inputImage.getRGB(x, y));
            }
        }
        return returnImage;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JMenuItem exitOption;
    private javax.swing.JButton forwardButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton left90Button;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton right90Button;
    private javax.swing.JButton zoomIn;
    private javax.swing.JButton zoomOut;
    // End of variables declaration//GEN-END:variables
    private JLabel label;
}
